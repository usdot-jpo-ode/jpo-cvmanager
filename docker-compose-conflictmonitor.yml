services:
  conflictmonitor:
    profiles:
      - conflictmonitor
    image: usdotjpoode/jpo-conflictmonitor:latest
    restart: ${RESTART_POLICY}
    ports:
      - '8082:8082'
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP:?error}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:?error}
    healthcheck:
      test: ['CMD', 'java', '-version']
      interval: 10s
      timeout: 10s
      retries: 20
    logging:
      options:
        max-size: '10m'
        max-file: '5'
    deploy:
      resources:
        limits:
          memory: 3G
    depends_on:
      kafka:
        condition: service_healthy
        required: false
      kafka_init:
        condition: service_started

  ode:
    profiles:
      - conflictmonitor
    image: usdotjpoode/jpo-ode:latest
    restart: ${RESTART_POLICY}
    ports:
      - '8080:8080'
      - '9090:9090'
      - '46753:46753/udp'
      - '46800:46800/udp'
      - '47900:47900/udp'
      - '44900:44900/udp'
      - '44910:44910/udp'
      - '44920:44920/udp'
      - '44930:44930/udp'
      - '44940:44940/udp'
      - '44990:44990/udp'
      - '5555:5555/udp'
      - '6666:6666/udp'
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP:?error}
      ODE_TIM_INGEST_MONITORING_ENABLED: true
      ODE_TIM_INGEST_MONITORING_INTERVAL: 60
      DATA_SIGNING_ENABLED_RSU: false
      DATA_SIGNING_ENABLED_SDW: false
      ODE_KAFKA_BROKERS: ${DOCKER_HOST_IP}:9092
      KAFKA_LINGER_MS: 1
      KAFKA_BATCH_SIZE: 16384
      KAFKA_RETRIES: 0
    depends_on:
      kafka:
        condition: service_healthy
        required: false
    healthcheck:
      test: ['CMD', 'wget', '--spider', 'http://localhost:8080']
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 10s
    logging:
      options:
        max-size: '10m'
        max-file: '5'

  geojsonconverter:
    profiles:
      - conflictmonitor
    image: usdotjpoode/geojsonconverter:latest
    restart: ${RESTART_POLICY}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP:?error}
      geometry.output.mode: GEOJSON_ONLY
      spring.kafka.bootstrap-servers: ${DOCKER_HOST_IP:?error}:9092
    logging:
      options:
        max-size: '10m'
        max-file: '5'
    depends_on:
      kafka:
        condition: service_healthy
        required: false

  connect:
    profiles:
      - conflictmonitor
    image: cp-kafka-connect:6.1.9
    build:
      context: ./resources/connect_scripts
      dockerfile: Dockerfile
    container_name: jpo-conflictmonitor-kafka-connect
    restart: always
    ports:
      - '8083:8083'
    depends_on:
      mongodb_container:
        condition: service_healthy
      kafka:
        condition: service_started
      conflictmonitor:
        condition: service_started
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      DB_HOST_IP: ${DB_HOST_IP}
      CONNECT_BOOTSTRAP_SERVERS: ${KAFKA_BROKER_IP}:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: CmConnectConfigs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_CLEANUP_POLICY: compact
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: CmConnectOffsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_CLEANUP_POLICY: compact
      CONNECT_STATUS_STORAGE_TOPIC: CmConnectStatus
      CONNECT_STATUS_STORAGE_CLEANUP_POLICY: compact
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'ERROR'
      CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=ERROR,org.reflections=ERROR,com.mongodb.kafka=ERROR'
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CM_MONGO_CONNECTOR_USERNAME: ${CM_MONGO_CONNECTOR_USERNAME}
      CM_MONGO_CONNECTOR_PASSWORD: ${CM_MONGO_CONNECTOR_PASSWORD}
    logging:
      options:
        max-size: '10m'
        max-file: '5'
    command:
      - bash
      - -c
      - |
        /etc/confluent/docker/run &
        echo "Waiting for Kafka Connect to start listening on kafka-connect ❳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://${KAFKA_CONNECT_IP}:8083/connectors) -eq 000 ] ; do
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://${KAFKA_CONNECT_IP}:8083/connectors) " (waiting for 200)"
          sleep 5
        done
        sleep 10
        echo -e "\n--\n+> Creating Kafka Connect MongoDB sink"
        bash /scripts/connect_start.sh "mongodb://${CM_MONGO_CONNECTOR_USERNAME}:${CM_MONGO_CONNECTOR_USERNAME}@${DOCKER_HOST_IP}:27017/?authMechanism=DEFAULT&authSource=ConflictMonitor&replicaSet=rs0"
        sleep infinity
    deploy:
      resources:
        limits:
          memory: 3G

volumes:
  ode_vol:
