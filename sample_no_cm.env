# Environment variable file for the JPO CV Manager API deployment through docker-compose
DOCKER_HOST_IP=
# Note if debugging, this webapp host IP should be set to the IP of the host machine running the webapp (localhost)
WEBAPP_HOST_IP=${DOCKER_HOST_IP}
# Note if using WEBAPP_DOMAIN for the docker-compose-webapp-deployment.yml file you will need to include http:// or https://
WEBAPP_DOMAIN=cvmanager.local.com
KC_HOST_IP=${DOCKER_HOST_IP}

# Firmware Manager connectivity in the format 'http://endpoint:port'
FIRMWARE_MANAGER_ENDPOINT=http://${DOCKER_HOST_IP}:8089

# Allowed CORS domain for accessing the CV Manager API from (set to the web application hostname)
# Make sure to include http:// or https://
# If using docker then this value should be set to: http://${WEBAPP_HOST_IP}:3000
# If running the webapp using npm then set it to: http://localhost:3000
# Leave as * to allow all domains access
CORS_DOMAIN=*

# PostgreSQL Database connection information
# this value may need to follow with the webapp host if debugging the applications 
PG_DB_HOST=${DOCKER_HOST_IP}:5432
PG_DB_NAME=postgres
PG_DB_USER=postgres
# If the PG_DB_PASS variable has special characters, make sure to wrap it in single quotes
PG_DB_PASS=

# If connecting to PGDB over websocket:
INSTANCE_CONNECTION_NAME=

# Keycloak authentication credentials
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD=

# Keycloak Parameters - to generate secret key use a password generator such as: https://www.avast.com/en-us/random-password-generator#pc and set the length to 32
KEYCLOAK_REALM=cvmanager
KEYCLOAK_API_CLIENT_ID=cvmanager-api
KEYCLOAK_API_CLIENT_SECRET_KEY=
KEYCLOAK_LOGIN_THEME_NAME=sample_theme
# Note if using KEYCLOAK_DOMAIN for the docker-compose-webapp-deployment.yml file you will need to include http:// or https://
KEYCLOAK_DOMAIN=cvmanager.auth.com


# GCP OAuth2.0 client ID for SSO authentication in keycloak - if not specified the google SSO will not be functional
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

# If "BIGQUERY", set the location of the GCP service account key attached as a volume
GOOGLE_APPLICATION_CREDENTIALS='./resources/google/sample_gcp_service_account.json'

# If "MONGODB", set the MongoDB variables
MONGO_DB_URI=
MONGO_DB_NAME="ode"

# If running MongoDB locally with docker-compose-mongo.yml uncomment the following line
MONGO_COLLECTION_TTL=7 # days

# If true sample data will be inserted into the MongoDB CVCounts, V2XGeoJson, and OdeSsmJson collections.
INSERT_SAMPLE_DATA=true

# Set these variables if using either "MONGODB" or "BIGQUERY"
# COUNTS_MSG_TYPES: Comma separated list of message types.
# COUNTS_MSG_TYPES must be set for the counts menu to correctly populate when building an image for deployment
COUNTS_MSG_TYPES='BSM,SSM,SPAT,SRM,MAP'
VIEWER_MSG_TYPES='BSM'
GEO_DB_NAME='V2XGeoJson'
SSM_DB_NAME=
SRM_DB_NAME=

# Specifies the maximum number of V2x messages returned from the geo_query_geo_data_mongo method before filtering occurs
MAX_GEO_QUERY_RECORDS=

# WZDx API key and endpoint for pulling WZDx data into the CV Manager
WZDX_API_KEY=
WZDX_ENDPOINT=

# Contact Support Menu Email Configuration
CSM_EMAIL_TO_SEND_FROM=
CSM_EMAIL_APP_USERNAME=
CSM_EMAIL_APP_PASSWORD=
CSM_EMAILS_TO_SEND_TO=
CSM_TARGET_SMTP_SERVER_ADDRESS=
CSM_TARGET_SMTP_SERVER_PORT=

# Python timezone for the CV Manager (You can list pytz timezones with the command 'pytz.all_timezones')
TIMEZONE="US/Mountain"

# Mapbox token for map rendering in the webapp
MAPBOX_TOKEN=
# DOT_NAME must be set for the DOT name to correctly populate when building an image for deployment
DOT_NAME="CDOT"
MAPBOX_INIT_LATITUDE="39.7392"
MAPBOX_INIT_LONGITUDE="-104.9903"
MAPBOX_INIT_ZOOM="10"

GCP_PROJECT_ID = ''

# ---------------------------------------------------------------------

# Count Metric Addon:
ENABLE_EMAILER = 'True'

# If ENABLE_EMAILER is 'True', set the following environment variables
DEPLOYMENT_TITLE = 'JPO-ODE'

# SMTP REQUIRED VARIABLES
SMTP_SERVER_IP = ''
SMTP_USERNAME = ''
SMTP_PASSWORD = ''
SMTP_EMAIL = ''
# Multiple emails can be delimited by a ','
SMTP_EMAIL_RECIPIENTS = 'test1@gmail.com,test2@gmail.com'

# If ENABLE_EMAILER is 'False', set the following environment variables

COUNT_MESSAGE_TYPES = 'bsm'
ODE_KAFKA_BROKERS = {DOCKER_HOST_IP}:9092

# EITHER "MONGODB" or "BIGQUERY"
COUNT_DESTINATION_DB = 'MONGODB'

# MONGODB REQUIRED VARIABLES
INPUT_COUNTS_MONGO_COLLECTION_NAME = ''
OUTPUT_COUNTS_MONGO_COLLECTION_NAME = ''

# BIGQUERY REQUIRED VARIABLES
KAFKA_BIGQUERY_TABLENAME = ''
# ---------------------------------------------------------------------

# Firmware Manager Addon:
BLOB_STORAGE_PROVIDER=DOCKER
BLOB_STORAGE_BUCKET=
## Docker volume mount point for BLOB storage (if using Docker)
HOST_BLOB_STORAGE_DIRECTORY=./local_blob_storage
# ---------------------------------------------------------------------

# Geo-spatial message query Addon:
GEO_INPUT_COLLECTIONS='OdeBsmJson,OdePsmJson'
# TTL duration in days:
GEO_TTL_DURATION=90
# ---------------------------------------------------------------------

# ISS Health Check Addon

# Key Storage
## Type of key storage, options: gcp, postgres
STORAGE_TYPE=postgres

# ISS Account Authentication
ISS_API_KEY=
ISS_API_KEY_NAME=
ISS_PROJECT_ID=
ISS_SCMS_TOKEN_REST_ENDPOINT=
ISS_SCMS_VEHICLE_REST_ENDPOINT=

## Postgres Storage (Required if STORAGE_TYPE=postgres)
### Table name to store keys
ISS_KEY_TABLE_NAME=

# ---------------------------------------------------------------------

# RSU Status Addon:

# Services that can be toggled on or off
# 'True' or 'False' are the only legal values

# Toggles monitoring of RSU online status
RSU_PING=True

# Fetches ping data from Zabbix - alternatively the service will ping the RSUs on its own
# Only used when RSU_PING is 'True'
ZABBIX=False

# Fetches SNMP configuration data for all RSUs
RSU_SNMP_FETCH=True

# Zabbix endpoint and API authentication
# Only used when ZABBIX is 'True'
ZABBIX_ENDPOINT=
ZABBIX_USER=
ZABBIX_PASSWORD=

# Customize the period at which the purger will determine a ping log is too old and will be deleted
# Number of hours
STALE_PERIOD=24
# ---------------------------------------------------------------------

# OBU OTA Server Addon:

# Routeable host name for the server
OBU_OTA_SERVER_HOST = "localhost"

# For users using GCP cloud storage
OBU_OTA_BLOB_STORAGE_BUCKET=""
OBU_OTA_BLOB_STORAGE_PATH=""

# Nginx basic auth username and password
OTA_USERNAME = "admin"
OTA_PASSWORD = "admin"

# Nginx encryption options: "plain", "ssl"
# Note that this just changes the config file attached as a volume to the Nginx container
NGINX_ENCRYPTION="plain"

# SSL file name in path /docker/nginx/ssl/
SERVER_CERT_FILE="ota_server.crt"
SERVER_KEY_FILE="ota_server.key"

# Max number of succesfull firmware upgrades to keep in the database per device SN
MAX_COUNT = 10

# ---------------------------------------------------------------------


# Levels are "DEBUG", "INFO", "WARNING", and "ERROR"
API_LOGGING_LEVEL="INFO"
FIRMWARE_MANAGER_LOGGING_LEVEL="INFO"
GEO_LOGGING_LEVEL="INFO"
ISS_LOGGING_LEVEL="INFO"
RSU_STATUS_LOGGING_LEVEL="INFO"
COUNTS_LOGGING_LEVEL="INFO"
OBU_OTA_LOGGING_LEVEL="INFO"
# Supported log levels are "ALL", "DEBUG", "ERROR", "FATAL", "INFO", "OFF", "TRACE" and "WARN"
KC_LOGGING_LEVEL="INFO"